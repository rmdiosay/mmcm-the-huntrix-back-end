"""Drop Buy

Revision ID: a15e43da3b72
Revises: db73ecdd9806
Create Date: 2025-08-24 05:50:40.422708

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a15e43da3b72'
down_revision: Union[str, Sequence[str], None] = 'db73ecdd9806'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TABLE IF EXISTS rent_properties CASCADE;")
    op.execute("DROP TABLE IF EXISTS lister_tenants CASCADE;")
    op.execute("DROP TABLE IF EXISTS buy_properties CASCADE;")
    op.execute("DROP TABLE IF EXISTS reviews CASCADE;")
    op.execute("DROP TABLE IF EXISTS messages CASCADE;")
    op.execute("DROP TABLE IF EXISTS lister_buyers CASCADE;")
    op.execute("DROP TABLE IF EXISTS users CASCADE;")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tier', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('points', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('referrals_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transactions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('referral_code', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('referred_by_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('property_sale', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('property_rental', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('direct_referrals', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('secondary_referrals', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tertiary_referrals', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('positive_reviews', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sale', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('rental', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['referred_by_id'], ['users.id'], name='users_referred_by_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('lister_buyers',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('buy_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('lister_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('buyer_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['buy_id'], ['buy_properties.id'], name=op.f('lister_buyers_buy_id_fkey')),
    sa.ForeignKeyConstraint(['buyer_id'], ['users.id'], name=op.f('lister_buyers_buyer_id_fkey')),
    sa.ForeignKeyConstraint(['lister_id'], ['users.id'], name=op.f('lister_buyers_lister_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('lister_buyers_pkey'))
    )
    op.create_table('messages',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('receiver_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['receiver_id'], ['users.id'], name=op.f('messages_receiver_id_fkey')),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name=op.f('messages_sender_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('messages_pkey'))
    )
    op.create_table('reviews',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comment', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rent_property_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['rent_property_id'], ['rent_properties.id'], name=op.f('reviews_rent_property_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('reviews_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('reviews_pkey'))
    )
    op.create_table('buy_properties',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('price', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('bed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('bath', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('size', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_popular', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_available', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('amenities', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('documents', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('images', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lister_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('buyer_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['buyer_id'], ['users.id'], name=op.f('buy_properties_buyer_id_fkey')),
    sa.ForeignKeyConstraint(['lister_id'], ['users.id'], name=op.f('buy_properties_lister_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('buy_properties_pkey')),
    sa.UniqueConstraint('slug', name=op.f('buy_properties_slug_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('lister_tenants',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rent_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('lister_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['lister_id'], ['users.id'], name=op.f('lister_tenants_lister_id_fkey')),
    sa.ForeignKeyConstraint(['rent_id'], ['rent_properties.id'], name=op.f('lister_tenants_rent_id_fkey')),
    sa.ForeignKeyConstraint(['tenant_id'], ['users.id'], name=op.f('lister_tenants_tenant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('lister_tenants_pkey'))
    )
    op.create_table('rent_properties',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('bed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('bath', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('size', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_popular', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_available', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('lease_term', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('amenities', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('images', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lister_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['lister_id'], ['users.id'], name=op.f('rent_properties_lister_id_fkey')),
    sa.ForeignKeyConstraint(['tenant_id'], ['users.id'], name=op.f('rent_properties_tenant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('rent_properties_pkey')),
    sa.UniqueConstraint('slug', name=op.f('rent_properties_slug_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
